= monoForth =
Ben Lynn

monoForth is a Forth interpreter. Major differences from typical
implementations:

 * The only type is arbitrary-precision signed integers.
 * Recursion is always allowed. Tail recursions are replaced with jumps.
 * EMIT, CHAR, and [CHAR] speak UTF-8 instead of ASCII

I originally chose the name "monochromeForth" to pay homage to
http://www.colorforth.com/[colorForth].
Later, I preferred "monoForth" because it's less of a mouthful, and "mono" is
apt for various reasons:

 * Unique design choices that deviate considerably from standards.
 * A word can only have one definition; old definitions are overwritten.
 * In "postfix-pure" mode, postfix notation is the only notation.
 * Only one integer type: signed arbitrary-precision.
 * All cells have size 1.

== Examples ==

Computing factorials:

  : factorial dup 1 > if dup 1 - factorial * then ;
  20 factorial .

Thanks to tail recursion optimization, if we rewrite with an accumulator then
hardly any stack is used:

  : *factorial dup 0> if dup 1- -rot * swap *factorial else drop then ;
  : factorial 1 swap *factorial ;
  20 factorial .

Computing n choose k:

  : choose dup if over 1- over 1- choose rot * swap / else drop drop 1 then ;
  100 50 choose .

UTF-8 http://en.wikipedia.org/wiki/Unicode[Unicode]:

  916 emit 1049 emit  \ Prints "ΔЙ".
  char ק . char م .   \ Prints "1511 1605 ".

The monoForth test program contains Forth code I found all over the net:
 
  * Examples from http://www.forth.com/starting-forth/[``Starting Forth'' by Leo Brodie].
  * http://en.literateprograms.org/Fixed-point_arithmetic_(Forth)[Mandelbrot set].
  * http://rosettacode.org/wiki/Conway\'s_Game_of_Life[Conway's Game of Life].
  * http://en.literateprograms.org/Eight_queens_puzzle_(Forth)[Eight Queens].

== The Postfix Purity Puzzle ==

[verse]
________________________________
The idea undergoing flotation:
If Forth likes postfix notation,
  Then why don't we nix
  All functions prefix
By adding a bit of quotation?
________________________________

Despite Forth's famously stubborn adherence to postfix notation, sometimes
is in fact infix or prefix. For example, the ":" word is prefix: it
creates a dictionary entry using the _next_ word before switching to compile
mode. Similarly, the word "TO" is infix: "1 TO ONE" assigns the number 1 to
the (previously declared) value named "ONE".

Why is this? Why would a language designer decide postfix is best, but then
add prefix notation anyway?

Perhaps it was felt using prefix notation for unary operations is acceptable in
moderation. After all, the most common notation for negative numbers looks like
"-123". The only prefix words of Forth are unary operations, and the infix
words are built upon them. But whatever the reason, Forth has a confusing
inconsistent mix of prefix and postfix unary operations.

What would Forth look like if we insisted on postfix? Instead of:

 : foo nip tuck ;  \ a b c -- c a c

we'd write:

 foo : nip tuck ;

But now we run into trouble: when "foo" is first encountered, Forth complains
because it is undefined. The only recourse is quotation. We must somehow
indicate that "foo" is to be taken
http://en.wikipedia.org/wiki/Literal_(computer_programming)[literally, so to
speak], rather than looked up and executed:

 ` foo` : nip tuck ;

Here, I've chosen the backquote for this purpose, as this character seems to be
unused by typical Forth programs.

This suggests a possible motive for tolerating prefix notation. Without it, we
would have to introduce quotation. And since word definitions are frequent,
quotation makes code less convenient to type.

However, we can easily reduce the inconvenience by, for example, defining
": foo:" to mean: quote "foo", then execute the usual meaning of ":".
Moreover, to make up for the one extra colon, we gain simplicity and
convenience in other ways. By factoring out quotation, we no longer need words
like dot-quote or s-quote or bracket-char. Even parenthesized comments can
simply be unused quoted strings.

Perhaps better still, we could follow colorForth's lead and introduce a colour
to mean the current string is quoted, though some convention would have to be
devised for coloured spaces.

== Postfix-pure monoForth ==

Executing the "postfix-pure" word in monoForth makes all words postfix.
Words that are usually prefix will use the last-quoted string instead.
Strings are quoted with backquote characters, but this being Forth, a space
must be present between the opening backquote and the start of the string. I've
made no attempt to make definitions easier to type. For example:

  postfix-pure
  ` foo` : nip tuck ;
  3671 emit 12354 emit  \ Prints "๗あ"
  ` 叶` char . ` 葉` char .  \ Prints "21494 33865 "
  0 ` x` value
  1 ` x` to

Normal Forth syntax can be restored by executing "postfix-impure".

While monoForth has refrained from colorForth's bold method of differentiating
types of words, we get a similar experience by viewing postfix-pure source
through an appropriate filter:

  $ sed 's/` \([^`]*\)`/\c[[1m\1\c[[0m/g' < source.f

Behind the scenes, monoForth maintains an extra pointer that records where the
quoted string begins in the input buffer. We could make it accessible to the
programmer via words like "Q>" and "QLEN".
